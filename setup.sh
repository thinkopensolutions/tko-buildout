#!/bin/bash

###############################################################################
# Copyright (C) 2012 Thinkopen Solutions Brasil, Lda. All Rights Reserved
# http://www.tkobr.com
# carlos.almeida@tkobr.com
#
# This script installs base modules, and performs the bootstrap plus buildout
###############################################################################

REP_DIR="tko-buildout"
BUILDOUT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BUILDOUT_FILE="buildout.cfg"
LOCK_FILE=${BUILDOUT_DIR%/*}/.tkobr_setup_lock
clean=false
packages=false

usage() {
    echo "Usage ./tko-buildout/setup.sh [-h] [-c]
OPTIONS
 -h This help, with examples
 -c Deletes all files and directories except buildout.cfg
    After that it builds everything from zero.
    WARNING: Will delete all non pushed changes made by user!"
}

while getopts "hcp:" arg; do
    case "$arg" in
        h) usage; exit;;
        c) clean=true;;
        p) packages="$OPTARG";;
        -) break;;
        \?) ;;
        *) echo "unhandled option $arg";;
        ?) usage
         exit 1;;
    esac
done

if [ $PWD == $BUILDOUT_DIR ]; then
    echo "ATTENTION: This script should be executed outside the tko-buildout repository directory."
    echo "           You must move one directory up and run ./tko-buildout/setup.sh"
    exit
fi

if [ ! -e $LOCK_FILE ]; then
    echo "###############################################################################"
    echo "This script will do:"
    echo " 1- Install system wide development packages in requirements.txt;"
    echo " 2- Bootstrap the buildout with: python bootstrap.py"
    echo " 3- Run the buildout with: bin/buildout"
    echo
    echo "On a day-by-day basis you change the recipe and buildout, with:"
    echo " - $> bin/buildout"
    echo " - $> bin/start_odoo"
    echo
    echo "ATTENTION: Make sure you have permissions to clone the repositories"
    echo "           the buildout will fail later on trying to clone them!!"
    echo -n "CTRL+C to cancel..."
    read
fi
touch $LOCK_FILE

# Ask user for the data into $BUILDOUT_FILE file
if [ ! -e $BUILDOUT_FILE ]; then
    buildout_file="$(cd $REP_DIR; ls -1d odoo*.cfg | tr '\n' ' ')"
    buildout_file=${buildout_file::-1}
    buildout_file=${buildout_file%% odoo-base.cfg}
    ok=False
    while [[ $ok == False ]]; do
        echo -n "Select base buildout file to extend from list or other (give complete path) [$buildout_file]: "
        read answer
        if [[ -e "$answer" ]]; then
            if [[ ! "$answer" == "" ]]; then
                buildout_file=$answer
            fi
            ok=True
        else
            echo "Setup can't find that recipe."
        fi
    done

    # Add rep dir if no dir is given
    if [[ $buildout_file != */* ]]; then
        buildout_file=$REP_DIR/$buildout_file
    fi

    # get version
    buildout_version=${buildout_file##*/}
    buildout_version=${buildout_version##odoo}
    buildout_version=${buildout_version%%-*}
    buildout_version=${buildout_version%%.*}

    buildout_db_host="localhost"
    echo -n "Insert database host [$buildout_db_host]: "
    read answer
    if [[ ! "$answer" == "" ]]; then
        buildout_db_host=$answer
    fi
    
    buildout_db_port="5432"
    echo -n "Insert database port [$buildout_db_port]: "
    read answer
    if [[ ! "$answer" == "" ]]; then
        buildout_db_port=$answer
    fi
    
    buildout_db_user="odoo$buildout_version"
    echo -n "Insert database user [$buildout_db_user]: "
    read answer
    if [[ ! "$answer" == "" ]]; then
        buildout_db_user=$answer
    fi
    
    buildout_db_password="odoo$buildout_version"
    echo -n "Insert database password [$buildout_db_password]: "
    read answer
    if [[ ! "$answer" == "" ]]; then
        buildout_db_password=$answer
    fi
    
    buildout_admin_password="admin"
    echo -n "Insert Odoo admin password [$buildout_admin_password]: "
    read answer
    if [[ ! "$answer" == "" ]]; then
        buildout_admin_password=$answer
    fi
    
    echo "; Odoo Buildout file generated by TKO ThinkOpen Solutions ./tko-buildout/setup.sh
; (C) ThinkOpen Solutions Brasil 2016-
; Issues managed at https://github.com/thinkopensolutions/tko-buildout/issues
[buildout]
extends = ${buildout_file}

[odoo]
;############################################################################
; XML-RPC / HTTP â€“ XML-RPC Configuration
options.longpolling_port = ${buildout_version}72
; specify the TCP port for the XML-RPC protocol
options.xmlrpc_port = ${buildout_version}73
; specify the TCP port for the XML-RPC Secure protocol
options.xmlrpcs_port = ${buildout_version}74
; specify the TCP port for the NETRPC protocol
options.netrpc_port = ${buildout_version}75
;############################################################################
; WEB Web interface Configuration
; Filter listed database REGEXP
options.dbfilter = ^%h$
; disable the ability to return the list of databases
options.list_db = False
;############################################################################
; Multiprocessing options
; Maximum allowed CPU time per request (default 60)
; Set this as half of the limit_time_real
options.limit_time_cpu = 240
; Maximum allowed Real time per request (default 120)
; Increase this at same time you increase nginx timeouts
options.limit_time_real = 480
; Specify the number of workers, 0 disable prefork mode.
options.workers = 2
; Maximum number of threads processing concurrently cron jobs (default 2)
options.max_cron_threads = 1
;############################################################################
; Database related options
; specify the database user name
options.db_user = $buildout_db_user
; specify the database password
options.db_password = $buildout_db_password
; specify the database host
options.db_host = $buildout_db_host
; specify the database port
options.db_port = $buildout_db_port
; specify the database connection limit
options.db_maxconn = 100
;############################################################################
; Server startup config - Common options
; Admin password for creating, restoring and backing up databases
options.admin_passwd = $buildout_admin_password" > $BUILDOUT_FILE
fi

# Install Linux base packages
to_install=""
installed_msg="Installed: (none)\|Instalado: (nenhum)"
if [[ $packages != false ]]; then
    for pkg in $packages; do
        if [[ $(apt-cache policy $pkg | grep "$installed_msg" | wc -l) -gt 0 ]]; then
            to_install="$to_install $pkg"
        fi
    done
fi
if [[ -e $BUILDOUT_DIR/requirements.txt ]]; then
    requirements=$(cat $BUILDOUT_DIR/requirements.txt | grep -v "#")
    for pkg in $requirements; do
        if [[ $(apt-cache policy $pkg | grep "$installed_msg" | wc -l) -gt 0 ]]; then
            to_install="$to_install $pkg"
        fi
    done
fi
if [[ $to_install != "" ]]; then
    echo
    echo "###############################################################################"
    echo "# Installing system dev packages..."
    echo "###############################################################################"
    echo "# Updating..."
    sudo apt-get update
    sudo apt-get -f install
    echo "# Installing $to_install packages..."
    sudo apt-get install $to_install
    sudo apt-get autoremove
else
    echo
    echo "###############################################################################"
    echo "# All system dev packages already installed..."
    echo "###############################################################################"
fi

if [[ $clean == true ]]; then
    echo
    echo "###############################################################################"
    echo "# Removing all files and directories except buildout.cfg..."
    echo "###############################################################################"
    rm -rf addons anybox.recipe.odoo bin bootstrap.py develop-eggs downloads eggs etc parts src etherpad-lite.cfg .installed.cfg .mr.developer.cfg upgrade.*
fi

if [ ! -e /usr/local/bin/pip ]; then
    echo
    echo "###############################################################################"
    echo "# Upgrading PIP..."
    echo "###############################################################################"
    sudo -H python -m pip install --upgrade --force-reinstall pip
    . ~/.profile
else
    echo
    echo "###############################################################################"
    echo "# PIP Upgraded..."
    echo "###############################################################################"
fi

install_nodejs() {
    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
    sudo apt-get install -y nodejs
    sudo ln -sf /usr/bin/nodejs /usr/bin/node
}

if [[ $(apt-cache policy nodejs | grep $installed_msg | wc -l) -eq 0 ]]; then
    node_version=$(nodejs -v)
    if [[ ${node_version:0:2} != "v8" ]]; then
        echo
        echo "###############################################################################"
        echo "# Upgrading Node.js..."
        echo "###############################################################################"
        install_nodejs
    else
        echo
        echo "###############################################################################"
        echo "# Node.js installed..."
        echo "###############################################################################"
    fi
else
    echo
    echo "###############################################################################"
    echo "# Installing Node.js..."
    echo "###############################################################################"
    install_nodejs
fi

if [ ! -e /usr/bin/npm ]; then
    echo
    echo "###############################################################################"
    echo "# Installing NPM..."
    echo "###############################################################################"
    sudo -H pip2 install npm
else
    echo
    echo "###############################################################################"
    echo "# NPM installed..."
    echo "###############################################################################"
fi

if [ ! -e /usr/bin/lessc ]; then
    echo
    echo "###############################################################################"
    echo "# Installing lessc..."
    echo "###############################################################################"
    sudo -H npm install -f -g less less-plugin-clean-css
else
    echo
    echo "###############################################################################"
    echo "# Lessc installed..."
    echo "###############################################################################"
fi

if [ ! -e /usr/bin/wkhtmltopdf.sh ]; then
    echo
    echo "###############################################################################"
    echo "# Installing Wkhtmltopdf..."
    echo "###############################################################################"
    . /etc/lsb-release
    if [ $(uname -i) == "x86_64" ]; then
        wget https://downloads.wkhtmltopdf.org/0.12/0.12.1/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-amd64.deb -O /tmp/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-amd64.deb
        sudo -H dpkg -i /tmp/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-amd64.deb
    else
        wget https://downloads.wkhtmltopdf.org/0.12/0.12.1/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-i386.deb -O /tmp/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-i386.deb
        sudo -H dpkg -i /tmp/wkhtmltox-0.12.1_linux-$DISTRIB_CODENAME-i386.deb
    fi
    echo 'xvfb-run --server-args="-screen 0, 1024x768x24" /usr/bin/wkhtmltopdf $*' > wkhtmltopdf.sh
    chmod 755 wkhtmltopdf.sh
    sudo mv wkhtmltopdf.sh /usr/bin/wkhtmltopdf.sh
else
    echo
    echo "###############################################################################"
    echo "# Wkhtmltopdf already installed..."
    echo "###############################################################################"
fi

if [[ ! -e /usr/share/GeoIP/GeoLiteCity.dat ]]; then
    echo
    echo "###############################################################################"
    echo "# Installing GeoIP..."
    echo "###############################################################################"
    old_pwd=$PWD
    sudo mkdir -p /usr/share/GeoIP
    cd /usr/share/GeoIP
    sudo wget -N http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    sudo gunzip GeoLiteCity.dat.gz
    cd $old_pwd
else
    echo
    echo "###############################################################################"
    echo "# GeoIP already installed..."
    echo "###############################################################################"
fi

echo
echo "###############################################################################"
echo "# Installing/Reinstalling bootstrap.py..."
echo "###############################################################################"
url=http://downloads.buildout.org/2/bootstrap.py
wget $url -O bootstrap.py
python bootstrap.py --buildout-version 2.5.2 --setuptools-version 27.3.0 -c $BUILDOUT_FILE || exit
#python bootstrap.py -c $BUILDOUT_FILE || exit

ps=$(ps -o stat= -p $PPID)
if [[ ${ps:1:1} == "s" ]]; then
    # It only runs if it was called directly by the user
    echo
    echo "###############################################################################"
    echo "ATTENTION: On a day-by-day base you just run the bin/buildout script."
    echo "bin/buildout"
    bin/buildout
fi

